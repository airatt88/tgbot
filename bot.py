import telebot
import random
import requests

TELEGRAM_TOKEN = "8000909618:AAH9skOY44FOwjgWBFm9nm91jxf_HvpmIiY"
OPENROUTER_API_KEY = "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"

bot = telebot.TeleBot(TELEGRAM_TOKEN)

# GPT-—Ñ—É–Ω–∫—Ü–∏—è —á–µ—Ä–µ–∑ OpenRouter
def ask_gpt(prompt):
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://t.me/ytytyttybot",
            "X-Title": "Telegram Bot"
        }
        payload = {
            "model": "openai/gpt-3.5-turbo",
            "messages": [{"role": "user", "content": prompt}],
        }

        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload
        )

        data = response.json()

        print("–û—Ç–≤–µ—Ç –æ—Ç OpenRouter:", data)  # –¥–ª—è –ª–æ–≥–æ–≤ Railway

        if response.status_code != 200 or "choices" not in data:
            error_msg = data.get("error", {}).get("message") or str(data)
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å AI: {error_msg}"

        return data["choices"][0]["message"]["content"].strip()

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Startup House! üöÄ")

# –ö–æ–º–∞–Ω–¥–∞ /ai
@bot.message_handler(commands=['ai'])
def ai_chat(message):
    question = message.text.replace('/ai', '').strip()
    if not question:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /ai, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ai –∫–∞–∫ –Ω–∞—á–∞—Ç—å —Å—Ç–∞—Ä—Ç–∞–ø?`")
    else:
        reply = ask_gpt(question)
        bot.reply_to(message, reply)

# –ö–æ–º–∞–Ω–¥–∞ /startup_idea
@bot.message_handler(commands=['startup_idea'])
def startup_idea(message):
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é –∏–¥–µ—é —Å—Ç–∞—Ä—Ç–∞–ø–∞, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –ò–ò –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏. –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:"
    idea = ask_gpt(prompt)
    bot.reply_to(message, f"üöÄ –ò–¥–µ—è: {idea}")

# –ö–æ–º–∞–Ω–¥–∞ /name_gen
@bot.message_handler(commands=['name_gen'])
def name_gen(message):
    names = ["NeuroShift", "AIvatar", "BizMind AI", "InnovaCore", "CogniSpark"]
    name = random.choice(names)
    bot.reply_to(message, f"–ö–∞–∫ —Ç–µ–±–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {name}?")

# –ö–æ–º–∞–Ω–¥–∞ /mentor
@bot.message_handler(commands=['mentor'])
def mentor(message):
    tips = [
        "–ù–∞—á–Ω–∏ —Å –ø—Ä–æ–±–ª–µ–º—ã, –∞ –Ω–µ —Å —Ä–µ—à–µ–Ω–∏—è.",
        "–î–µ–ª–∞–π MVP –∏ —Å–æ–±–∏—Ä–∞–π —Ñ–∏–¥–±–µ–∫.",
        "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –æ–¥–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Å–Ω–∞—á–∞–ª–∞."
    ]
    tip = random.choice(tips)
    bot.reply_to(message, f"–°–æ–≤–µ—Ç –æ—Ç –º–µ–Ω—Ç–æ—Ä–∞: {tip}")

# –ö–æ–º–∞–Ω–¥–∞ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['help'])
def help_command(message):
    bot.reply_to(message, """
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help ‚Äî –í—Å–µ –∫–æ–º–∞–Ω–¥—ã
/ai [–≤–æ–ø—Ä–æ—Å] ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI
/startup_idea ‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-—Å—Ç–∞—Ä—Ç–∞–ø–∞
/name_gen ‚Äî –ü—Ä–∏–¥—É–º–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
/mentor ‚Äî –°–æ–≤–µ—Ç –æ—Ç –º–µ–Ω—Ç–æ—Ä–∞
""")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True, interval=0)

